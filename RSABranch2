package default_package;
import java.math.BigInteger;
public class RSAEncryption{
	public static void main(String[] args){
		Sieve sieve=new Sieve();
		int p=sieve.randPrimeBetween(50, 99);
		int q=sieve.randPrimeBetween(50, 99);
//		int p=61;
//		int q=53;
		Integer pq=p*q;
		if(pq<0||(p==q)){
			p=sieve.randPrimeBetween(50, 99);
			q=sieve.randPrimeBetween(50, 99);
			pq=p*q;
		}
		int pTotient=p-1;
		int qTotient=q-1;
		int lcm=(int)lcm(pTotient, qTotient);
		int e=0;
		if((p>17)||(q>17)){
			e=17;
		}else{
			e=7;
		}
		int d=0;
		int count=0;
		while((e*d%lcm)!=1){
			d=d+1;
			count=count+1;
		}
		if(d<0){
			while((e*d%lcm)!=1){
				d=d+1;
				count=count+1;
			}
		}
		int ed=e*d;
		println("p = "+p);
		println("q = "+q);
		println("pq = "+pq);
		println("final totient = "+lcm);
		println("calculation of ed = "+ed);
		println("d = "+d);
		int message=65;
		println("message = "+message);
		BigInteger message0=new BigInteger(""+message);
		BigInteger e0=new BigInteger(""+e);
		BigInteger pq0=new BigInteger(""+pq);
		BigInteger encryptedMessage=message0.modPow(e0,
				pq0);
		println("ENCRYPTED MESSAGE: "+encryptedMessage);
		BigInteger d0=new BigInteger(""+d);
		BigInteger decryptedMessage=encryptedMessage.modPow(d0,
				pq0);
		println("DECRYPTED MESSAGE: "+decryptedMessage);
	}

	//METHODS USED IN THIS CLASS.
	static void println(Object x){
		System.out.println(x);
		}
	private static long lcm(long a, long b){
	    return a*(b/gcd(a,b));
	 	}
	private static long gcd(long a, long b){
		while(b>0){
			long temp=b;
			b=a%b;
			a=temp;
			}
		return a;
		}
}
